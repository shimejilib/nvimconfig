[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = ['InsertEnter']
hooks_file = '$BASE_DIR/plugin_settings/ddc.vim'
lua_source = '''
local capabilities = require("ddc_nvim_lsp").make_client_capabilities()
require("lspconfig").denols.setup({
  capabilities = capabilities,
})
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option(#{
    \   auto_confirm_time: 1000,
    \   auto_select: v:false,
    \   horizontal_menu: v:false,
    \   max_width: 80,
    \   offset_cmdcol: 0,
    \   padding: v:false,
    \   preview: v:true,
    \   preview_width: 80,
    \   reversed: v:false,
    \   use_complete: v:true,
    \   use_setline: v:false,
    \ })
  call pum#set_local_option('c', #{
    \   horizontal_menu: v:false,
    \ })
'''

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
[[plugins]]
repo = 'uga-rosa/ddc-nvim-lsp-setup'
on_source = 'ddc.vim'
depends = ['ddc-nvim-lsp', 'nvim-lspconfig']
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'
[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
on_source = 'ddc.vim'
depends = ['ddc.vim']
[[plugins]]
repo = 'Shougo/ddc-source-shell'
on_source = 'ddc.vim'
depends = ['ddc.vim']

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_source = '''
  -- NOTE: Disable lsp watcher. Too slow on linux
  -- https://github.com/neovim/neovim/issues/23725#issuecomment-1561364086
  -- require('vim.lsp._watchfiles')._watchfunc = function()
  --   return function() end
  -- end

  vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      update_in_insert = false,
      virtual_text = {
        format = function(diagnostic)
          return string.format(
            '%s (%s: %s)',
            diagnostic.message,
            diagnostic.source,
            diagnostic.code
          )
        end
      },
  })
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
  -- https://zenn.dev/kawarimidoll/articles/2b57745045b225
  require('mason-lspconfig').setup_handlers({
    function(server_name)
      local nvim_lsp = require('lspconfig')
      local is_node_repo = vim.fn.findfile('package.json', '.;') ~= ''

      local opts = {}

      if server_name == 'vtsls' then
        -- Must be node directory
        if not is_node_repo then
          return
        end

        opts.root_dir = nvim_lsp.util.root_pattern('package.json')
      elseif server_name == 'denols' then
        -- Must not be node directory
        if is_node_repo then
          return
        end

        opts.init_options = {
          lint = true,
          unstable = true,
          documentPreloadLimit = 10,
          suggest = {
            autoImports = false,
            imports = {
              hosts = {
                ['https://deno.land'] = true,
                ['https://cdn.nest.land'] = true,
                ['https://crux.land'] = true
              },
            },
          },
        }
      elseif server_name == 'solargraph' then
        opts.single_file_support = true
        opts.capabilities = {}
      elseif server_name == 'lua_ls' then
        opts = {
          settings = {
            Lua = {
              runtime = {
                -- Tell the language server which version of Lua you're using
                -- (most likely LuaJIT in the case of Neovim)
                version = 'LuaJIT',
              },
              diagnostics = {
                -- Get the language server to recognize the `vim` global
                globals = {
                  'vim',
                  'require'
                },
              },
              workspace = {
                -- Make the server aware of Neovim runtime files
                library = vim.api.nvim_get_runtime_file("", true),
              },
              -- Do not send telemetry data
              telemetry = {
                enable = false,
              },
            },
          },
        }
      end

      nvim_lsp[server_name].setup(opts)
    end
  })
'''

[[plugins]]
repo = 'mason-org/mason-registry'

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
on_event = 'BufRead'
depends = ['mason-lspconfig.nvim', 'mason-registry', 'nvim-lspconfig']
lua_source= '''
local mason = require('mason')
mason.setup({
  ui = {
    icons = {
      server_installed = "✓",
      server_pending = "➜",
      server_uninstalled = "✗",
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})
local nvim_lsp = require('lspconfig')
-- nvim_lsp.jedi_language_server.setup({
--   on_attach = function(client, bufnr)
-- 	mason.lsp.on_attach(client, bufnr)
--   end
-- })
local mason_lspconfig = require('mason-lspconfig')
mason_lspconfig.setup()
'''

# asyncronous linting engine
# [[plugins]]
# repo = 'w0rp/ale'
# on_event = 'BufEnter'
# hook_add = '''
# let g:ale_linters = {
# \   'python': ['pylint'],
# \   'sh': ['shellcheck'],
# \}
# '''

